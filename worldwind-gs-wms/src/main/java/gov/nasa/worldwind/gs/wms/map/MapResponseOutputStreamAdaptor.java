/*
 * Copyright (C) 2017 NASA World Wind.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package gov.nasa.worldwind.gs.wms.map;

import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.awt.image.WritableRaster;
import java.io.IOException;
import java.io.OutputStream;
import javax.media.jai.RenderedOp;
import org.geoserver.platform.ServiceException;
import org.geoserver.wms.MapProducerCapabilities;
import org.geoserver.wms.WMS;
import org.geoserver.wms.WMSMapContent;
import org.geoserver.wms.map.RenderedImageMapResponse;

/**
 * The MapResponseOutputStreamAdaptor class adapts the output stream of a
 * rendered image generated by a delegate RenderedImageMapResponse so that it is
 * compatible with ImageIO.read operations used in subsequent GetMap request
 * processing.
 *
 * @author Bruce Schubert
 */
public class MapResponseOutputStreamAdaptor extends RenderedImageMapResponse {

    protected final RenderedImageMapResponse delegate;

    /**
     * Constructs a map response that adapts the output of the delegate
     * RenderedImageMapResponse object.
     *
     * @param mimeType The mime type to be written to an HTTP header
     * @param wms The WMS service configuration
     * @param delegate The delegate handler
     */
    public MapResponseOutputStreamAdaptor(String mimeType, WMS wms, RenderedImageMapResponse delegate) {
        super(mimeType, wms);
        this.delegate = delegate;
    }

    /**
     * Ensures the image is compatible with downstream image read operations
     * before generating the output stream. Specifically, it converts JAI
     * {@code TranslateIntOpImage} type images to a BufferedImage before calling
     * the delegate {@code formatImageOutputStream}.
     *
     * @param image The image to be transformed
     * @param outStream The output stream of the transformed image
     * @param mapContent
     * @throws ServiceException
     * @throws IOException
     */
    @Override
    public void formatImageOutputStream(RenderedImage image, OutputStream outStream, WMSMapContent mapContent) throws ServiceException, IOException {
        // Convert TranslateIntOpImage types to BufferedImages
        if (image instanceof RenderedOp && (image.getTileGridXOffset() != 0 || image.getTileGridYOffset() != 0)) {
            // The following code to create the finalImage was copied from the
            // GeoTools ImageWorker.writeJPEG() method.
            final BufferedImage finalImage = new BufferedImage(
                    image.getColorModel(),
                    ((WritableRaster) image.getData()).createWritableTranslatedChild(0, 0),
                    image.getColorModel().isAlphaPremultiplied(), null);
            this.delegate.formatImageOutputStream(finalImage, outStream, mapContent);
        } else {
            this.delegate.formatImageOutputStream(image, outStream, mapContent);
        }
    }

    @Override
    public MapProducerCapabilities getCapabilities(String outputFormat) {
        return this.delegate.getCapabilities(outputFormat);
    }
}
